{"version":3,"sources":["Countdown.test.jsx"],"names":[],"mappings":";;AAAA,IAAI,QAAQ,QAAQ,OAAR,CAAZ;AACA,IAAI,WAAW,QAAQ,WAAR,CAAf;AACA,IAAI,SAAS,QAAQ,QAAR,CAAb;AACA,IAAI,IAAI,QAAQ,QAAR,CAAR;AACA;AACA,IAAI,YAAY,QAAQ,yBAAR,CAAhB;;AAEA,IAAI,YAAY,QAAQ,WAAR,CAAhB;;AAEA,SAAS,WAAT,EAAsB,YAAM;AACxB,OAAG,cAAH,EAAmB,YAAM;AACrB,eAAO,SAAP,EAAkB,OAAlB;AACH,KAFD;;AAIA,aAAS,oBAAT,EAA+B,YAAK;AAChC;AACA;AACA,WAAG,2CAAH,EAAgD,UAAC,IAAD,EAAU;AACtD,gBAAI,YAAY,UAAU,kBAAV,CAA6B,oBAAC,SAAD,OAA7B,CAAhB;AACA,sBAAU,kBAAV,CAA6B,EAA7B;;AAEA,mBAAO,UAAU,KAAV,CAAgB,KAAvB,EAA8B,IAA9B,CAAmC,EAAnC;AACA,mBAAO,UAAU,KAAV,CAAgB,eAAvB,EAAwC,IAAxC,CAA6C,SAA7C;;AAEA;AACA;AACA;AACA,uBAAW,YAAM;AACb,uBAAO,UAAU,KAAV,CAAgB,KAAvB,EAA8B,IAA9B,CAAmC,CAAnC;AACA;AACH,aAHD,EAGG,IAHH;AAIH,SAdD;;AAgBA,WAAG,iDAAH,EAAsD,UAAC,IAAD,EAAU;AAC5D,gBAAI,YAAY,UAAU,kBAAV,CAA6B,oBAAC,SAAD,OAA7B,CAAhB;AACA,sBAAU,kBAAV,CAA6B,CAA7B;;AAEA,uBAAW,YAAM;AACb,uBAAO,UAAU,KAAV,CAAgB,KAAvB,EAA8B,IAA9B,CAAmC,CAAnC;AACA;AACH,aAHD,EAGG,IAHH;AAKH,SATD;AAUH,KA7BD;AA8BH,CAnCD","file":"Countdown.test.js","sourcesContent":["let React = require('react');\r\nlet ReactDOM = require('react-dom');\r\nlet expect = require('expect');\r\nlet $ = require('jQuery');\r\n// Makes tests for React components easier\r\nlet TestUtils = require('react-addons-test-utils');\r\n\r\nlet Countdown = require('Countdown');\r\n\r\ndescribe('Countdown', () => {\r\n    it('should exist', () => {\r\n        expect(Countdown).toExist();\r\n    });\r\n\r\n    describe('handleSetCountdown', ()=> {\r\n        // With the done parameter we tell mocha that we're doing an asynchronous test\r\n        // and it should wait until done is called to stop the test\r\n        it('should set state to started and countdown', (done) => {\r\n            let countdown = TestUtils.renderIntoDocument(<Countdown/>);\r\n            countdown.handleSetCountdown(10);\r\n\r\n            expect(countdown.state.count).toBe(10);\r\n            expect(countdown.state.countdownStatus).toBe('started');\r\n\r\n            // Test that after just over a second the count gets updated\r\n            // Asynchronous\r\n            // Mocha doesn't support asynchronous\r\n            setTimeout(() => {\r\n                expect(countdown.state.count).toBe(9);\r\n                done();\r\n            }, 1001);\r\n        });\r\n\r\n        it('should should never set count to less than zero', (done) => {\r\n            let countdown = TestUtils.renderIntoDocument(<Countdown/>);\r\n            countdown.handleSetCountdown(1);\r\n\r\n            setTimeout(() => {\r\n                expect(countdown.state.count).toBe(0);\r\n                done();\r\n            }, 2001);\r\n\r\n        });\r\n    });\r\n});"]}