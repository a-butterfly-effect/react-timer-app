{"version":3,"sources":["Timer.test.jsx"],"names":[],"mappings":";;AAAA,IAAI,QAAQ,QAAQ,OAAR,CAAZ;AACA,IAAI,WAAW,QAAQ,WAAR,CAAf;AACA,IAAI,SAAS,QAAQ,QAAR,CAAb;AACA,IAAI,IAAI,QAAQ,QAAR,CAAR;AACA;AACA,IAAI,YAAY,QAAQ,yBAAR,CAAhB;;AAEA,IAAI,QAAQ,QAAQ,OAAR,CAAZ;;AAEA,SAAS,OAAT,EAAkB,YAAM;AACpB,OAAG,cAAH,EAAmB,YAAM;AACrB,eAAO,KAAP,EAAc,OAAd;AACH,KAFD;;AAIA,OAAG,sCAAH,EAA2C,UAAC,IAAD,EAAU;AACjD,YAAI,QAAQ,UAAU,kBAAV,CAA6B,oBAAC,KAAD,OAA7B,CAAZ;AACA,cAAM,kBAAN,CAAyB,SAAzB;;AAEA,eAAO,MAAM,KAAN,CAAY,KAAnB,EAA0B,IAA1B,CAA+B,CAA/B;;AAEA;AACA;AACA;AACA,mBAAW,YAAM;AACb,mBAAO,MAAM,KAAN,CAAY,KAAnB,EAA0B,IAA1B,CAA+B,CAA/B;AACA,mBAAO,MAAM,KAAN,CAAY,WAAnB,EAAgC,IAAhC,CAAqC,SAArC;AACA;AACH,SAJD,EAIG,IAJH;AAKH,KAdD;;AAgBA,OAAG,qCAAH,EAA0C,UAAC,IAAD,EAAU;AAChD,YAAI,QAAQ,UAAU,kBAAV,CAA6B,oBAAC,KAAD,OAA7B,CAAZ;AACA,cAAM,QAAN,CAAe,EAAC,OAAO,EAAR,EAAf;AACA,cAAM,kBAAN,CAAyB,SAAzB;AACA,cAAM,kBAAN,CAAyB,QAAzB;;AAGA;AACA;AACA;AACA,mBAAW,YAAM;AACb,mBAAO,MAAM,KAAN,CAAY,WAAnB,EAAgC,IAAhC,CAAqC,QAArC;AACA,mBAAO,MAAM,KAAN,CAAY,KAAnB,EAA0B,IAA1B,CAA+B,EAA/B;AACA;AACH,SAJD,EAIG,IAJH;AAKH,KAfD;;AAiBA,OAAG,sCAAH,EAA2C,UAAC,IAAD,EAAU;AACjD,YAAI,QAAQ,UAAU,kBAAV,CAA6B,oBAAC,KAAD,OAA7B,CAAZ;AACA,cAAM,QAAN,CAAe,EAAC,OAAO,EAAR,EAAf;AACA,cAAM,kBAAN,CAAyB,SAAzB;AACA,cAAM,kBAAN,CAAyB,SAAzB;;AAGA;AACA;AACA;AACA,mBAAW,YAAM;AACb,mBAAO,MAAM,KAAN,CAAY,WAAnB,EAAgC,IAAhC,CAAqC,SAArC;AACA,mBAAO,MAAM,KAAN,CAAY,KAAnB,EAA0B,IAA1B,CAA+B,CAA/B;AACA;AACH,SAJD,EAIG,IAJH;AAKH,KAfD;AAgBH,CAtDD","file":"Timer.test.js","sourcesContent":["let React = require('react');\r\nlet ReactDOM = require('react-dom');\r\nlet expect = require('expect');\r\nlet $ = require('jQuery');\r\n// Makes tests for React components easier\r\nlet TestUtils = require('react-addons-test-utils');\r\n\r\nlet Timer = require('Timer');\r\n\r\ndescribe('Timer', () => {\r\n    it('should exist', () => {\r\n        expect(Timer).toExist();\r\n    });\r\n\r\n    it('should start timer on started status', (done) => {\r\n        let timer = TestUtils.renderIntoDocument(<Timer/>);\r\n        timer.handleStatusChange('started');\r\n\r\n        expect(timer.state.count).toBe(0);\r\n\r\n        // Test that after just over a second the count gets updated\r\n        // setTimeout is asynchronous\r\n        // Mocha doesn't support asynchronous so we use done\r\n        setTimeout(() => {\r\n            expect(timer.state.count).toBe(1);\r\n            expect(timer.state.timerStatus).toBe('started');\r\n            done();\r\n        }, 1001);\r\n    });\r\n\r\n    it('should pause timer on paused status', (done) => {\r\n        let timer = TestUtils.renderIntoDocument(<Timer/>);\r\n        timer.setState({count: 10});\r\n        timer.handleStatusChange('started');\r\n        timer.handleStatusChange('paused');\r\n\r\n\r\n        // Test that after just over a second the count doesn't get updated\r\n        // setTimeout is asynchronous\r\n        // Mocha doesn't support asynchronous so we use done\r\n        setTimeout(() => {\r\n            expect(timer.state.timerStatus).toBe('paused');\r\n            expect(timer.state.count).toBe(10);\r\n            done();\r\n        }, 1001);\r\n    });\r\n\r\n    it('should clear count on stopped status', (done) => {\r\n        let timer = TestUtils.renderIntoDocument(<Timer/>);\r\n        timer.setState({count: 22});\r\n        timer.handleStatusChange('started');\r\n        timer.handleStatusChange('stopped');\r\n\r\n\r\n        // Test that after just over a second the count becomes 0\r\n        // setTimeout is asynchronous\r\n        // Mocha doesn't support asynchronous so we use done\r\n        setTimeout(() => {\r\n            expect(timer.state.timerStatus).toBe('stopped');\r\n            expect(timer.state.count).toBe(0);\r\n            done();\r\n        }, 1001);\r\n    });\r\n});"]}