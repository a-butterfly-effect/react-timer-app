{"version":3,"sources":["CountdownForm.test.jsx"],"names":[],"mappings":";;AAAA,IAAI,QAAQ,QAAQ,OAAR,CAAZ;AACA,IAAI,WAAW,QAAQ,WAAR,CAAf;AACA,IAAI,SAAS,QAAQ,QAAR,CAAb;AACA,IAAI,IAAI,QAAQ,QAAR,CAAR;AACA;AACA,IAAI,YAAY,QAAQ,yBAAR,CAAhB;;AAEA,IAAI,gBAAgB,QAAQ,eAAR,CAApB;;AAEA,SAAS,eAAT,EAA0B,YAAM;AAC5B,OAAG,cAAH,EAAmB,YAAM;AACrB,eAAO,aAAP,EAAsB,OAAtB;AACH,KAFD;;AAIA,OAAG,qDAAH,EAA0D,YAAM;AAC5D;AACA;AACA,YAAI,MAAM,OAAO,SAAP,EAAV;AACA,YAAI,gBAAgB,UAAU,kBAAV,CAA6B,oBAAC,aAAD,IAAe,gBAAgB,GAA/B,GAA7B,CAApB;AACA,YAAI,MAAM,EAAE,SAAS,WAAT,CAAqB,aAArB,CAAF,CAAV;;AAEA;AACA,sBAAc,IAAd,CAAmB,OAAnB,CAA2B,KAA3B,GAAmC,KAAnC;;AAEA;AACA;AACA,kBAAU,QAAV,CAAmB,MAAnB,CAA0B,IAAI,IAAJ,CAAS,MAAT,EAAiB,CAAjB,CAA1B;;AAEA;AACA,eAAO,GAAP,EAAY,oBAAZ,CAAiC,GAAjC;AACH,KAhBD;;AAkBA,OAAG,2DAAH,EAAgE,YAAM;AAClE;AACA;AACA,YAAI,MAAM,OAAO,SAAP,EAAV;AACA,YAAI,gBAAgB,UAAU,kBAAV,CAA6B,oBAAC,aAAD,IAAe,gBAAgB,GAA/B,GAA7B,CAApB;AACA,YAAI,MAAM,EAAE,SAAS,WAAT,CAAqB,aAArB,CAAF,CAAV;;AAEA;AACA,sBAAc,IAAd,CAAmB,OAAnB,CAA2B,KAA3B,GAAmC,QAAnC;;AAEA;AACA;AACA,kBAAU,QAAV,CAAmB,MAAnB,CAA0B,IAAI,IAAJ,CAAS,MAAT,EAAiB,CAAjB,CAA1B;;AAEA;AACA,eAAO,GAAP,EAAY,mBAAZ;AACH,KAhBD;AAiBH,CAxCD","file":"CountdownForm.test.js","sourcesContent":["let React = require('react');\r\nlet ReactDOM = require('react-dom');\r\nlet expect = require('expect');\r\nlet $ = require('jQuery');\r\n// Makes tests for React components easier\r\nlet TestUtils = require('react-addons-test-utils');\r\n\r\nlet CountdownForm = require('CountdownForm');\r\n\r\ndescribe('CountdownForm', () => {\r\n    it('should exist', () => {\r\n        expect(CountdownForm).toExist();\r\n    });\r\n\r\n    it('should call onSetCountdown if valid seconds entered', () => {\r\n        // Track the calls that are made to other functions and make various assertions\r\n        // based on the arguments and context that were used\r\n        let spy = expect.createSpy();\r\n        let countdownForm = TestUtils.renderIntoDocument(<CountdownForm onSetCountdown={spy}/>);\r\n        let $el = $(ReactDOM.findDOMNode(countdownForm));\r\n\r\n        // Create the seconds input for the form\r\n        countdownForm.refs.seconds.value = '109';\r\n\r\n        // Simulate a submit\r\n        // Access the first element of the form class\r\n        TestUtils.Simulate.submit($el.find('form')[0]);\r\n\r\n        // Make sure the spy was called at least once\r\n        expect(spy).toHaveBeenCalledWith(109);\r\n    });\r\n\r\n    it('should not call onSetCountdown if invalid seconds entered', () => {\r\n        // Track the calls that are made to other functions and make various assertions\r\n        // based on the arguments and context that were used\r\n        let spy = expect.createSpy();\r\n        let countdownForm = TestUtils.renderIntoDocument(<CountdownForm onSetCountdown={spy}/>);\r\n        let $el = $(ReactDOM.findDOMNode(countdownForm));\r\n\r\n        // Create the seconds input for the form\r\n        countdownForm.refs.seconds.value = 'abcdef';\r\n\r\n        // Simulate a submit\r\n        // Access the first element of the form class\r\n        TestUtils.Simulate.submit($el.find('form')[0]);\r\n\r\n        // Make sure the spy was not called at all\r\n        expect(spy).toNotHaveBeenCalled();\r\n    });\r\n});"]}