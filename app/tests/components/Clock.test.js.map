{"version":3,"sources":["Clock.test.jsx"],"names":[],"mappings":";;AAAA,IAAI,QAAQ,QAAQ,OAAR,CAAZ;AACA,IAAI,WAAW,QAAQ,WAAR,CAAf;AACA,IAAI,SAAS,QAAQ,QAAR,CAAb;AACA,IAAI,IAAI,QAAQ,QAAR,CAAR;AACA;AACA,IAAI,YAAY,QAAQ,yBAAR,CAAhB;;AAEA,IAAI,QAAQ,QAAQ,OAAR,CAAZ;;AAEA,SAAS,OAAT,EAAkB,YAAM;AACpB,OAAG,cAAH,EAAmB,YAAM;AACrB,eAAO,KAAP,EAAc,OAAd;AACH,KAFD;;AAIA;AACA,aAAS,eAAT,EAA0B,YAAM;AAC5B,WAAG,uBAAH,EAA4B,YAAM;AAC9B;AACA,gBAAI,QAAQ,UAAU,kBAAV,CAA6B,oBAAC,KAAD,OAA7B,CAAZ;AACA,gBAAI,UAAU,GAAd;AACA,gBAAI,WAAW,OAAf;AACA;AACA,gBAAI,SAAS,MAAM,aAAN,CAAoB,OAApB,CAAb;;AAEA,mBAAO,MAAP,EAAe,IAAf,CAAoB,QAApB;AACH,SATD;;AAWA,WAAG,qDAAH,EAA0D,YAAM;AAC5D;AACA,gBAAI,QAAQ,UAAU,kBAAV,CAA6B,oBAAC,KAAD,OAA7B,CAAZ;AACA,gBAAI,UAAU,EAAd;AACA,gBAAI,SAAS,MAAM,aAAN,CAAoB,OAApB,CAAb;AACA,gBAAI,WAAW,OAAf;;AAEA,mBAAO,MAAP,EAAe,IAAf,CAAoB,QAApB;AACH,SARD;AASH,KArBD;;AAuBA;AACA,aAAS,QAAT,EAAmB,YAAM;AACrB,WAAG,+BAAH,EAAoC,YAAM;AACtC,gBAAI,QAAQ,UAAU,kBAAV,CAA6B,oBAAC,KAAD,IAAO,cAAc,EAArB,GAA7B,CAAZ;AACA;AACA;AACA;AACA,gBAAI,MAAM,EAAE,SAAS,WAAT,CAAqB,KAArB,CAAF,CAAV;AACA,gBAAI,aAAa,IAAI,IAAJ,CAAS,aAAT,EAAwB,IAAxB,EAAjB;AACA,gBAAI,WAAW,OAAf;;AAEA,mBAAO,UAAP,EAAmB,IAAnB,CAAwB,QAAxB;AACH,SAVD;AAWH,KAZD;AAcH,CA5CD","file":"Clock.test.js","sourcesContent":["let React = require('react');\r\nlet ReactDOM = require('react-dom');\r\nlet expect = require('expect');\r\nlet $ = require('jQuery');\r\n// Makes tests for React components easier\r\nlet TestUtils = require('react-addons-test-utils');\r\n\r\nlet Clock = require('Clock');\r\n\r\ndescribe('Clock', () => {\r\n    it('should exist', () => {\r\n        expect(Clock).toExist();\r\n    });\r\n\r\n    // Test the formatSecond() function\r\n    describe('formatSeconds', () => {\r\n        it('should format seconds', () => {\r\n            // First render the component\r\n            let clock = TestUtils.renderIntoDocument(<Clock/>);\r\n            let seconds = 675;\r\n            let expected = '11:15';\r\n            // Store the actual result\r\n            let actual = clock.formatSeconds(seconds);\r\n\r\n            expect(actual).toBe(expected);\r\n        });\r\n\r\n        it('should format seconds when min/sec are less than 10', () => {\r\n            // First render the component\r\n            let clock = TestUtils.renderIntoDocument(<Clock/>);\r\n            let seconds = 61;\r\n            let actual = clock.formatSeconds(seconds);\r\n            let expected = '01:01';\r\n\r\n            expect(actual).toBe(expected);\r\n        });\r\n    });\r\n\r\n    // Test the render() function\r\n    describe('render', () => {\r\n        it('should render clock to output', () => {\r\n            let clock = TestUtils.renderIntoDocument(<Clock totalSeconds={62}/>);\r\n            // Store the root of our component in terms of the DOM\r\n            // Convert our component into the actual HTML that is rendered into the browser\r\n            // and pass that to jQuery\r\n            let $el = $(ReactDOM.findDOMNode(clock));\r\n            let actualText = $el.find('.clock-text').text();\r\n            let expected = '01:02';\r\n\r\n            expect(actualText).toBe(expected);\r\n        });\r\n    });\r\n\r\n});"]}