{"version":3,"sources":["Timer.jsx"],"names":[],"mappings":";;AAAA,IAAI,QAAQ,QAAQ,OAAR,CAAZ;AACA,IAAI,QAAQ,QAAQ,OAAR,CAAZ;AACA,IAAI,WAAW,QAAQ,UAAR,CAAf;;AAEA;AACA,IAAI,QAAQ,MAAM,WAAN,CAAkB;AAAA;;AAC1B,0BAAsB,gCAAY;AAC9B;AACA;AACA,sBAAc,KAAK,KAAnB;AACA,aAAK,KAAL,GAAa,SAAb;AACH,KANyB;AAO1B,wBAAsB,4BAAU,SAAV,EAAqB,SAArB,EAAgC;AAClD;AACA,YAAI,KAAK,KAAL,CAAW,WAAX,KAA2B,UAAU,WAAzC,EAAsD;AAClD,oBAAQ,KAAK,KAAL,CAAW,WAAnB;AACI,qBAAK,SAAL;AACI,yBAAK,UAAL;AACA;AACJ;AACA;AACA;AACA,qBAAK,SAAL;AACI,yBAAK,QAAL,CAAc;AACV,+BAAO;AADG,qBAAd;AAOJ;AACA,qBAAK,QAAL;AACI,kCAAc,KAAK,KAAnB;AACA,yBAAK,KAAL,GAAa,SAAb;AACA;AAnBR;AAqBH;AACJ,KAhCyB;AAiC1B,gBAAkB,sBAAY;AAAA;;AAC1B,aAAK,KAAL,GAAa,YAAY,YAAM;AAC3B,gBAAI,WAAW,MAAK,KAAL,CAAW,KAAX,GAAmB,CAAlC;AACA,kBAAK,QAAL,CAAc;AACV,uBAAO;AADG,aAAd;AAIH,SANY,EAMV,IANU,CAAb;AAOH,KAzCyB;AA0C1B,qBAAiB,2BAAY;AACzB;;AAEA,eAAO;AACH,mBAAiB,CADd;AAEH;AACA,yBAAa;AAHV,SAAP;AAKH,KAlDyB;AAmD1B,wBAAqB,4BAAU,SAAV,EAAqB;AACtC,aAAK,QAAL,CAAc;AACV,yBAAa;AADH,SAAd;AAGH,KAvDyB;AAwD1B,YAAQ,kBAAY;AAAA,qBACW,KAAK,KADhB;AAAA,YACX,KADW,UACX,KADW;AAAA,YACJ,WADI,UACJ,WADI;;;AAGhB,eACI;AAAA;AAAA,cAAK,WAAU,OAAf;AACI;AAAA;AAAA,kBAAI,WAAU,YAAd;AAAA;AAAA,aADJ;AAEI,gCAAC,KAAD,IAAO,cAAc,KAArB,GAFJ;AAGI,gCAAC,QAAD,IAAU,iBAAiB,WAA3B,EAAwC,gBAAgB,KAAK,kBAA7D;AAHJ,SADJ;AAOH;AAlEyB,CAAlB,CAAZ;;AAqEA,OAAO,OAAP,GAAiB,KAAjB","file":"Timer.js","sourcesContent":["let React = require('react');\r\nlet Clock = require('Clock');\r\nlet Controls = require('Controls');\r\n\r\n// This component will handle all of the logic of the timer functionality\r\nlet Timer = React.createClass({\r\n    componentWillUnmount: function () {\r\n        // console.log('componentWillUnmount');\r\n        // Stop the interval\r\n        clearInterval(this.timer);\r\n        this.timer = undefined;\r\n    },\r\n    componentDidUpdate  : function (prevProps, prevState) {\r\n        // console.log('componentDidUpdate');\r\n        if (this.state.timerStatus !== prevState.timerStatus) {\r\n            switch (this.state.timerStatus) {\r\n                case 'started':\r\n                    this.startTimer();\r\n                    break;\r\n                // When set the state to stopped or paused\r\n                // we reset the count and also cancel the set interval\r\n                // Which means we have a fallthrough and it is acceptable in this case\r\n                case 'stopped':\r\n                    this.setState({\r\n                        count: 0,\r\n                        // This would work too but it is kinda dangerous\r\n                        // because we might add more features in our Timer component\r\n                        // like laps or something\r\n                        // timerStatus: 'paused'\r\n                    });\r\n                // In contrast to paused where we just cancel the set interval\r\n                case 'paused':\r\n                    clearInterval(this.timer);\r\n                    this.timer = undefined;\r\n                    break;\r\n            }\r\n        }\r\n    },\r\n    startTimer      : function () {\r\n        this.timer = setInterval(() => {\r\n            let newCount = this.state.count + 1;\r\n            this.setState({\r\n                count: newCount\r\n            });\r\n\r\n        }, 1000);\r\n    },\r\n    getInitialState: function () {\r\n        // console.log('getInitialState');\r\n\r\n        return {\r\n            count          : 0,\r\n            // The timer is initially paused\r\n            timerStatus: 'paused'\r\n        };\r\n    },\r\n    handleStatusChange : function (newStatus) {\r\n        this.setState({\r\n            timerStatus: newStatus\r\n        });\r\n    },\r\n    render: function () {\r\n        let {count, timerStatus} = this.state;\r\n\r\n        return (\r\n            <div className=\"timer\">\r\n                <h1 className=\"page-title\">Timer App</h1>\r\n                <Clock totalSeconds={count}/>\r\n                <Controls countdownStatus={timerStatus} onStatusChange={this.handleStatusChange}/>\r\n            </div>\r\n        );\r\n    }\r\n});\r\n\r\nmodule.exports = Timer;"]}