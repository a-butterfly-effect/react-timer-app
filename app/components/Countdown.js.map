{"version":3,"sources":["Countdown.jsx"],"names":[],"mappings":";;AAAA,IAAI,QAAQ,QAAQ,OAAR,CAAZ;AACA,IAAI,QAAQ,QAAQ,OAAR,CAAZ;AACA,IAAI,gBAAgB,QAAQ,eAAR,CAApB;;AAEA,IAAI,YAAY,MAAM,WAAN,CAAkB;AAAA;;AAC9B,qBAAoB,2BAAY;AAC5B,eAAO;AACH,mBAAiB,CADd;AAEH,6BAAiB;AAFd,SAAP;AAIH,KAN6B;AAO9B;AACA,wBAAoB,4BAAU,SAAV,EAAqB,SAArB,EAAgC;AAChD,YAAI,KAAK,KAAL,CAAW,eAAX,KAA+B,UAAU,eAA7C,EAA8D;AAC1D,oBAAQ,KAAK,KAAL,CAAW,eAAnB;AACI,qBAAK,SAAL;AACI,yBAAK,UAAL;AACA;AAHR;AAKH;AACJ,KAhB6B;AAiB9B;AACA,gBAAoB,sBAAY;AAAA;;AAC5B;AACA;AACA;AACA;AACA;AACA,aAAK,KAAL,GAAa,YAAY,YAAM;AAC3B,gBAAI,WAAW,MAAK,KAAL,CAAW,KAAX,GAAmB,CAAlC;AACA,kBAAK,QAAL,CAAc;AACV,uBAAO,YAAY,CAAZ,GAAgB,QAAhB,GAA2B;AADxB,aAAd;;AAIA;AACH,SAPY,EAOV,IAPU,CAAb;AAQH,KAhC6B;AAiC9B,wBAAoB,4BAAU,OAAV,EAAmB;AACnC,aAAK,QAAL,CAAc;AACV,mBAAiB,OADP;AAEV,6BAAiB;AAFP,SAAd;AAIH,KAtC6B;AAuC9B,YAAoB,kBAAY;AAAA,YACvB,KADuB,GACd,KAAK,KADS,CACvB,KADuB;;;AAG5B,eACI;AAAA;AAAA;AACI,gCAAC,KAAD,IAAO,cAAc,KAArB,GADJ;AAEI,gCAAC,aAAD,IAAe,gBAAgB,KAAK,kBAApC;AAFJ,SADJ;AAMH;AAhD6B,CAAlB,CAAhB;;AAmDA,OAAO,OAAP,GAAiB,SAAjB","file":"Countdown.js","sourcesContent":["let React = require('react');\r\nlet Clock = require('Clock');\r\nlet CountdownForm = require('CountdownForm');\r\n\r\nlet Countdown = React.createClass({\r\n    getInitialState   : function () {\r\n        return {\r\n            count          : 0,\r\n            countdownStatus: 'stopped'\r\n        };\r\n    },\r\n    // Gets called after either props or state get updated\r\n    componentDidUpdate: function (prevProps, prevState) {\r\n        if (this.state.countdownStatus !== prevState.countdownStatus) {\r\n            switch (this.state.countdownStatus) {\r\n                case 'started':\r\n                    this.startTimer();\r\n                    break;\r\n            }\r\n        }\r\n    },\r\n    // Start the timer\r\n    startTimer        : function () {\r\n        // Trigger a function once after a certain amount of time\r\n        // setTimeout();\r\n        // Keep triggering a function every interval\r\n        // Give access to the variable so we can clear it later the user clicks pause\r\n        // or when they click the clear button\r\n        this.timer = setInterval(() => {\r\n            let newCount = this.state.count - 1;\r\n            this.setState({\r\n                count: newCount >= 0 ? newCount : 0\r\n            });\r\n\r\n            // If we have reached the end of the countdown then there is no reason to keep the timer around\r\n        }, 1000);\r\n    },\r\n    handleSetCountdown: function (seconds) {\r\n        this.setState({\r\n            count          : seconds,\r\n            countdownStatus: 'started'\r\n        });\r\n    },\r\n    render            : function () {\r\n        let {count} = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <Clock totalSeconds={count}/>\r\n                <CountdownForm onSetCountdown={this.handleSetCountdown}/>\r\n            </div>\r\n        );\r\n    }\r\n});\r\n\r\nmodule.exports = Countdown;"]}